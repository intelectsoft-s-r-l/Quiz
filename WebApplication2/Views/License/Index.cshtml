@using ISQuiz.Models.API.License;
@using ISQuiz.Models.Enum;
@model IEnumerable<License>



@{
    ViewData["Title"] = Localization.Licenses;
    Layout = "~/Views/_Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-xl-12">
        <div class="button-items">

            <button id="addButtonPar" type="button" style="margin-bottom: 25px;" class="btn btn-success waves-effect waves-light"><i class="mdi mdi-plus me-1"></i> @Localization.Generatelicense</button>
            <div id="visualCreate" style="display: none;">
                <div class="card">

                    <div style="padding: 10px;" id="createlicense"></div>

                </div>

            </div>
            <br />
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <table id="datatable" class="table table-bordered dt-responsive nowrap" style="border-collapse: collapse; border-spacing: 0; width: 100%;">
                    <thead>
                        <tr>
                            <th>@Localization.licenseActivated</th>
                            <th>@Localization.Status</th>
                            <th>@Localization.deviceModel</th>
                            <th>@Localization.deviceName</th>
                            <th>@Localization.battery</th>
                            <th style="width: 120px;"></th>
                        </tr>
                    </thead>


                    <tbody>
                        @foreach (var license in Model)
                        {
                            <tr>
                                <td>@license.licenseActivated</td>
                                @{
                                    string licenseStatusLocalization = license.licenseStatus switch
                                    {
                                        EnLicenseStatus.NotActivated => Localization.NotActivated,
                                        EnLicenseStatus.Activated => Localization.Activated,
                                        EnLicenseStatus.Disabled => Localization.Disabled,
                                        _ => license.licenseStatus.ToString()
                                    };

                                    string badgeClass = license.licenseStatus switch
                                    {
                                        EnLicenseStatus.NotActivated => "bg-soft-primary",
                                        EnLicenseStatus.Activated => "bg-soft-success",
                                        EnLicenseStatus.Disabled => "bg-soft-danger",
                                        _ => "bg-soft-primary"
                                    };
                                }

                                <th><span class="badge @badgeClass font-size-15" style="width: 100%;">@licenseStatusLocalization</span></th>

                                <th>@license.deviceModel</th>
                                <th>@license.deviceName</th>
                                <th>@license.battery</th>
                                <td>
                                    <div class="dropdown float-end">
                                        <a class="text-body dropdown-toggle font-size-18" href="#" role="button" data-bs-toggle="dropdown" aria-haspopup="true">
                                            <i class="uil uil-ellipsis-v"></i>
                                        </a>

                                        <div class="dropdown-menu dropdown-menu-end">

                                            @if (license.licenseStatus != EnLicenseStatus.Activated)
                                            {
                                                <a type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target=".bs-example-modal-lg" onclick="drawPatrialView('/License/Action?oid=@license.oid&option=1', 'lgModalBody')">@Localization.Activate</a>
                                            }
                                            @if (license.licenseStatus != EnLicenseStatus.Disabled)
                                            {
                                                <a type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target=".bs-example-modal-lg" onclick="drawPatrialView('/License/Action?oid=@license.oid&option=2', 'lgModalBody')">@Localization.Deactivate</a>
                                            }
                                            <a type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target=".bs-example-modal-lg" onclick="drawPatrialView('/License/Action?oid=@license.oid&option=3', 'lgModalBody')">@Localization.Release</a>

                                        </div>
                                    </div>
                                    <a type="button" class="px-3 text-warning" data-bs-toggle="modal" data-bs-target=".bs-example-modal-lg" onclick="drawPatrialView('/License/Detail/'+'@license.oid', 'lgModalBody')"><i class="uil uil-file-info-alt font-size-18"></i></a>
                                    <a type="button" class="px-3 text-danger" data-bs-toggle="modal" data-bs-target=".bs-example-modal-lg" onclick="drawPatrialView('/License/Delete/'+'@license.oid', 'lgModalBody')"><i class="uil-trash-alt  font-size-18"></i></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>



<script>
    drawPatrialView("/License/CreateLicence", "createlicense");
    $(document).ready(function () {
        $("#addButtonPar").click(function () {
            $("#visualCreate").show();
            $(this).hide();
        });
        // Проверяем, инициализирована ли уже таблица DataTable
        if ($.fn.DataTable.isDataTable('#datatable')) {
            // Если да, уничтожаем текущую инициализацию
            $('#datatable').DataTable().destroy();
        }

        var dataTableOptions = {
            language: {
                processing: "@Localization.processing",
                search: "@Localization.Search",
                lengthMenu: "@Localization.lengthMenu",
                info: "@Localization.info",
                infoEmpty: "@Localization.infoEmpty",
                infoFiltered: "@Localization.infoFiltered",
                infoPostFix: "",
                loadingRecords: "@Localization.loadingRecords",
                zeroRecords: "@Localization.zeroRecords",
                emptyTable: "@Localization.emptyTable",
                paginate: {
                    first: "@Localization.first",
                    previous: "@Localization.previous",
                    next: "@Localization.next",
                    last: "@Localization.last"
                }/*,
                            aria: {
                                sortAscending: ": активировать для сортировки столбца по возрастанию",
                                sortDescending: ": активировать для сортировки столбца по убыванию"
                            }*/
            },
            columnDefs: [
                { orderable: false, targets: [5] }
            ],
            // Другие настройки DataTables...
        };


        // Используйте языковые опции для DataTables
        $('#datatable').DataTable(dataTableOptions);
    });

</script>
